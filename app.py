import streamlit as st
from langchain.agents import Tool, initialize_agent
from langchain.llms import Ollama
from langdetect import detect
import requests

st.set_page_config(page_title="Medical Assistant IA", layout="centered")

# 🎨 Custom CSS
st.markdown("""
    <style>
    .stTextInput > div > div > input {
        background-color: #f5f5f5;
        border: 1px solid #d3d3d3;
        padding: 10px;
        font-size: 16px;
        border-radius: 8px;
    }
    .stButton>button {
        background-color: #4CAF50;
        color: white;
        font-weight: bold;
        border-radius: 8px;
        padding: 8px 16px;
        margin-top: 10px;
    }
    .chat-bubble-user {
        background-color: #e0f7fa;
        padding: 10px;
        border-radius: 10px;
        margin-bottom: 10px;
    }
    .chat-bubble-ai {
        background-color: #f1f8e9;
        padding: 10px;
        border-radius: 10px;
        margin-bottom: 10px;
    }
    </style>
""", unsafe_allow_html=True)


# 🔁 0. Initialisation
if "history" not in st.session_state:
    st.session_state.history = []  # List of (question, response) pairs

# 🔍 1. Web Search Tool
def web_search(query: str) -> str:
    serp_api_key = st.secrets["SERPAPI_KEY"]  # Secure access to API key

    params = {
        "q": query,
        "api_key": serp_api_key
    }

    headers = {
        "Accept": "application/json"
    }

    try:
        response = requests.get("https://serpapi.com/search", params=params, headers=headers)
        response.raise_for_status()
        results = response.json()

        if 'organic_results' in results and results['organic_results']:
            return results['organic_results'][0].get('snippet', "No snippet found.")
        else:
            return "No relevant information found on the internet."

    except Exception as e:
        return f"Error during web search: {e}"

# 🤖 2. Agent Setup
@st.cache_resource
def create_agent():
    search_tool = Tool(
        name="WebSearch",
        func=web_search,
        description="A tool to search the web for relevant information on Medical Field."
    )
    llm = Ollama(model="mistral")
    agent = initialize_agent(
        tools=[search_tool],
        llm=llm,
        agent="zero-shot-react-description",
        verbose=True,
        handle_parsing_errors=True,
        max_iterations=10,
        max_execution_time=60
    )
    return agent

# 🧠 Header Banner
st.markdown("""
    <div style="background-color:#283747; padding:20px; border-radius:10px; text-align:center">
        <h1 style="color:white">🤖 Medical Assistant IA</h1>
        <p style="color:#D6EAF8;">Your bilingual AI to help you understand medical questions</p>
    </div>
""", unsafe_allow_html=True)

# 🗂️ Display conversation history with styled bubbles
st.markdown("### 🗂️ Conversation History")
for q, r in st.session_state.history:
    st.markdown(f'<div class="chat-bubble-user"><strong>🧑 You:</strong><br>{q}</div>', unsafe_allow_html=True)
    st.markdown(f'<div class="chat-bubble-ai"><strong>🤖 Assistant:</strong><br>{r}</div>', unsafe_allow_html=True)

# 📥 User input
query = st.text_input("💬 Your question:", placeholder="Ex: Ask your question")

# 📤 Response generation
if query:
    with st.spinner("Processing your question..."):
        try:
            language = detect(query)
            agent = create_agent()

            lang_instruction = (
                "Répondez de manière concise en français : "
                if language == "fr"
                else "Answer concisely in English: "
            )
            full_prompt = f"{lang_instruction}\n{query}"
            response = agent.run(full_prompt)

            if response:
                st.success("✅ Response generated:")
                st.markdown(f'<div class="chat-bubble-ai"><strong>🤖 Assistant:</strong><br>{response}</div>', unsafe_allow_html=True)
                st.session_state.history.append((query, response))
            else:
                st.warning("⚠️ No response generated by the agent.")

        except Exception as e:
            st.error(f"❌ Error while generating the response: {e}")
